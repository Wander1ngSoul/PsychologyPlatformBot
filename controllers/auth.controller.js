const authService = require('../services/auth.service');
const { Markup } = require('telegraf');

class AuthController {
    constructor() {
        this.startRegistration = this.startRegistration.bind(this);
        this.handleRegistrationStep = this.handleRegistrationStep.bind(this);
    }

    async startRegistration(ctx) {
        try {
            ctx.session = ctx.session || {};
            ctx.session.registration = {
                step: 'email',
                telegramId: ctx.from.id
            };
            await ctx.reply('–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
        } catch (err) {
            console.error('Error in startRegistration:', err);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    async handleRegistrationStep(ctx) {
        try {
            if (!ctx.session?.registration) {
                return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
            }

            const session = ctx.session.registration;

            if (session.step === 'email') {
                const email = ctx.message?.text;
                if (!this.validateEmail(email)) {
                    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:');
                }

                ctx.session.registration = {
                    ...session,
                    step: 'password',
                    email
                };
                await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:');
            }
            else if (session.step === 'password') {
                const password = ctx.message?.text;
                if (!password || password.length < 6) {
                    return await ctx.reply('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                }

                const userId = await authService.registerUser(
                    ctx.from.username || `user_${ctx.from.id}`,
                    ctx.session.registration.email,
                    password
                );

                await authService.linkTelegramToUser(userId, ctx.from.id);
                delete ctx.session.registration;

                await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç.',
                    Markup.keyboard([['üîä –ê—É–¥–∏–æ–º–µ–¥–∏—Ç–∞—Ü–∏—è']]).resize());
            }
        } catch (err) {
            console.error('Error in handleRegistrationStep:', err);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    validateEmail(email) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }
}

module.exports = new AuthController();