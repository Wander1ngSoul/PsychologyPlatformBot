const freeSoundService = require('../services/freesound.service');

class MeditationController {
    async sendMeditation(ctx) {
        try {
            await ctx.replyWithChatAction('upload_audio');
            const data = await freeSoundService.searchMeditation();

            if (!data.results || data.results.length === 0) {
                return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π üòî');
            }

            const sound = data.results.find(s => s.previews && s.previews['preview-hq-mp3']);
            if (!sound) {
                return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∞—É–¥–∏–æ üò¢');
            }

            await ctx.replyWithAudio(sound.previews['preview-hq-mp3'], {
                title: sound.name || '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
                performer: sound.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
                caption: `–õ–∏—Ü–µ–Ω–∑–∏—è: ${sound.license || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏:', error);
            await this.handleMeditationError(ctx, error);
        }
    }

    async handleMeditationError(ctx, error) {
        if (error.response) {
            await ctx.reply(`–û—à–∏–±–∫–∞ API: ${error.response.status} ${error.response.statusText}`);
        } else if (error.request) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –º–µ–¥–∏—Ç–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥');
        } else {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üòü');
        }
    }
}

module.exports = new MeditationController();